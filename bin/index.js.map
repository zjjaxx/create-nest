{"version":3,"sources":["../index.ts","../package.json","../config/banner.ts","../config/feature.ts","../utils/index.ts","../utils/renderTemplate.ts","../utils/deepMerge.ts","../utils/sortDependencies.ts","../utils/directoryTraverse.ts","../utils/getCommand.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { parseArgs } from \"node:util\";\nimport cliPackageJson from \"./package.json\";\nimport {\n  intro,\n  text,\n  confirm,\n  cancel,\n  multiselect,\n  outro,\n} from \"@clack/prompts\";\nimport { gradientBanner, defaultBanner } from \"./config/banner\";\nimport { FEATURE_OPTIONS } from \"./config/feature\";\nimport {\n  unwrapPrompt,\n  canSkipEmptying,\n  isValidPackageName,\n  toValidPackageName,\n  emptyDir,\n} from \"./utils/index\";\nimport renderTemplate from \"./utils/renderTemplate\";\nimport picocolors from \"picocolors\";\nimport path from \"node:path\";\nimport fs from \"node:fs\";\nimport { fileURLToPath } from \"node:url\";\nimport Handlebars from \"handlebars\";\nimport { preOrderDirectoryTraverse } from \"./utils/directoryTraverse\";\nimport getCommand from \"./utils/getCommand\";\nconst { red, green, cyan, bold, dim } = picocolors;\ntype PromptResult = {\n  projectName?: string;\n  shouldOverwrite?: boolean;\n  packageName?: string;\n  features?: (typeof FEATURE_OPTIONS)[number][\"value\"][];\n};\nconst init = async () => {\n  const { values: argv, positionals } = parseArgs({\n    args: process.argv.slice(2), // 配置 parseArgs 时指定要解析的参数来源\n    options: {\n      force: {\n        type: \"boolean\",\n        short: \"f\",\n      },\n      version: {\n        type: \"boolean\",\n        short: \"v\",\n      },\n    },\n    strict: true, // 严格模式，不允许未知参数\n    allowPositionals: true, // 允许位置参数\n  });\n\n  if (argv.version) {\n    console.log(`${cliPackageJson.name} is v${cliPackageJson.version}`);\n    process.exit(0);\n  }\n  let targetDir = positionals[0];\n\n  const defaultProjectName = targetDir || \"nest-project\";\n\n  const forceOverwrite = argv.force;\n  const result: PromptResult = {\n    projectName: defaultProjectName,\n    shouldOverwrite: forceOverwrite,\n    packageName: defaultProjectName,\n    features: [],\n  };\n  // 根据终端是否支持 TTY 以及颜色深度，选择显示渐变横幅或默认横幅\n  intro(\n    process.stdout.isTTY && process.stdout.getColorDepth() > 8\n      ? gradientBanner\n      : defaultBanner\n  );\n\n  // 检查目标目录是否未指定\n  if (!targetDir) {\n    // 调用 unwrapPrompt 函数获取用户输入的项目名称\n    const _result = await unwrapPrompt(\n      // 使用 @clack/prompts 的 text 函数创建一个文本输入提示\n      text({\n        // 提示用户输入项目名称\n        message: \"请输入项目名称\",\n        // 设置输入框的占位符为默认项目名称\n        placeholder: defaultProjectName,\n        // 验证用户输入的项目名称是否为空\n        validate: (value) =>\n          value.trim().length > 0 ? undefined : \"项目名称不能为空\",\n      })\n    );\n    // 将用户输入的项目名称去除首尾空格后赋值给目标目录、项目名称和包名\n    targetDir = result.projectName = result.packageName = _result.trim();\n  }\n  // 检查目标目录是否不能跳过清空操作，并且没有使用强制覆盖选项\n  if (!canSkipEmptying(targetDir) && !forceOverwrite) {\n    // 弹出确认提示框，询问用户是否要覆盖非空目录\n    result.shouldOverwrite = await unwrapPrompt(\n      confirm({\n        // 根据目标目录是否为当前目录，生成不同的提示信息\n        message: `${\n          targetDir === \".\" ? \"当前目录\" : `目标文件夹 \"${targetDir}\"`\n        } 非空，是否覆盖？`,\n        // 默认值为 false，表示不覆盖\n        initialValue: false,\n      })\n    );\n    // 如果用户选择不覆盖，则取消操作并退出程序\n    if (!result.shouldOverwrite) {\n      cancel(red(\"✖\") + ` 操作取消`);\n      process.exit(0);\n    }\n  }\n  // 检查目标目录名称是否为有效的包名\n  if (!isValidPackageName(targetDir)) {\n    // 若不是有效包名，则通过命令行交互让用户输入有效的包名\n    result.packageName = await unwrapPrompt(\n      text({\n        // 提示用户输入包名称\n        message: \"请输入包名称：\",\n        // 设置初始值为转换后的有效包名\n        initialValue: toValidPackageName(targetDir),\n        // 验证用户输入的包名是否有效\n        validate: (value) =>\n          isValidPackageName(value) ? undefined : \"无效的 package.json 名称\",\n      })\n    );\n  }\n  result.features = await unwrapPrompt(\n    multiselect({\n      message: `请选择要包含的功能： ${dim(\n        \"(↑/↓ 切换，空格选择，a 全选，回车确认)\"\n      )}`,\n      // @ts-expect-error @clack/prompt's type doesn't support readonly array yet\n      options: FEATURE_OPTIONS,\n      required: false,\n    })\n  );\n  // 拼接当前工作目录和目标目录，得到项目根目录的完整路径\n  const root = path.join(process.cwd(), targetDir);\n  // 检查项目根目录是否存在，并且用户选择了覆盖目录\n  if (fs.existsSync(root) && result.shouldOverwrite) {\n    // 若存在且需要覆盖，则清空该目录\n    emptyDir(root);\n  }\n  // 检查项目根目录是否不存在\n  else if (!fs.existsSync(root)) {\n    // 若不存在，则创建该目录\n    fs.mkdirSync(root);\n  }\n  console.log(`\\n正在初始化项目 ${root}...`);\n  const pkg = { name: result.packageName, version: \"0.0.0\" };\n  // 初始化package.json文件\n  fs.writeFileSync(\n    path.resolve(root, \"package.json\"),\n    JSON.stringify(pkg, null, 2)\n  );\n\n  const templateRoot = fileURLToPath(new URL(\"../template\", import.meta.url));\n  const callbacks = [];\n  const render = function render(templateName) {\n    const templateDir = path.resolve(templateRoot, templateName);\n    renderTemplate(templateDir, root, callbacks);\n  };\n  render(\"base\");\n  if (result.features.includes(\"auth\")) {\n    render(\"config/auth\");\n    render(\"code/auth\");\n  }\n  if (result.features.includes(\"cache\")) {\n    render(\"config/cache\");\n    render(\"code/cache\");\n  }\n  if (result.features.includes(\"mail\")) {\n    render(\"config/mail\");\n    render(\"code/mail\");\n  }\n  if (result.features.includes(\"swagger\")) {\n    render(\"config/swagger\");\n    render(\"code/swagger\");\n  }\n\n  const dataStore = {};\n  // Process callbacks\n  for (const cb of callbacks) {\n    await cb(dataStore);\n  }\n\n  // EJS template rendering\n  // 调用 preOrderDirectoryTraverse 函数对项目根目录进行前序遍历\n  // 第一个参数 root 表示要遍历的根目录路径\n  // 第二个参数是一个空函数，意味着在进入目录时不执行任何操作\n  // 第三个参数是一个回调函数，会在遍历到每个文件时执行\n  preOrderDirectoryTraverse(\n    root,\n    () => {},\n    (filepath) => {\n      // 检查当前文件路径是否以 .ejs 结尾，如果是则进行 EJS 模板渲染处理\n      if (filepath.endsWith(\".handlebars\")) {\n        // 以 UTF-8 编码读取 .ejs 模板文件的内容\n        const template = fs.readFileSync(filepath, \"utf-8\");\n        // 生成渲染后的文件路径，将 .ejs 扩展名移除\n        const dest = filepath.replace(/\\.handlebars$/, \"\");\n        const c_template=Handlebars.compile(template);\n        // 使用 ejs 库对模板进行渲染，传入模板内容和对应的数据\n        const content =c_template( dataStore[dest])\n        // 将渲染后的内容写入到生成的文件路径中\n        fs.writeFileSync(dest, content);\n        // 删除原始的 .ejs 模板文件\n        fs.unlinkSync(filepath);\n      }\n    }\n  );\n\n  // Instructions:\n  // Supported package managers: pnpm > yarn > bun > npm\n  const userAgent = process.env.npm_config_user_agent ?? \"\";\n  const packageManager = /pnpm/.test(userAgent)\n    ? \"pnpm\"\n    : /yarn/.test(userAgent)\n    ? \"yarn\"\n    : /bun/.test(userAgent)\n    ? \"bun\"\n    : \"npm\";\n\n  let outroMessage = `项目初始化完成，可执行以下命令：\\n\\n`;\n  if (root !== process.cwd()) {\n    const cdProjectName = path.relative(process.cwd(), root);\n    outroMessage += `   ${bold(\n      green(\n        `cd ${\n          cdProjectName.includes(\" \") ? `\"${cdProjectName}\"` : cdProjectName\n        }`\n      )\n    )}\\n`;\n  }\n  outroMessage += `   ${bold(green(getCommand(packageManager, \"install\")))}\\n`;\n  outroMessage += `   ${bold(green(getCommand(packageManager, \"dev\")))}\\n`;\n\n  outroMessage += `\n      ${dim(\"|\")} 可选：使用以下命令在项目目录中初始化 Git：\n         \n         ${bold(\n           green('git init && git add -A && git commit -m \"initial commit\"')\n         )}`;\n\n  outro(outroMessage);\n};\n\ninit().catch((e) => {\n  console.error(e);\n  process.exit(1);\n});\n","{\n  \"name\": \"create-nest-universal\",\n  \"version\": \"1.0.5\",\n  \"description\": \"nest-cli\",\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"bin\": {\n    \"create-nest-universal\": \"./bin/index.js\"\n  },\n  \"files\": [\n    \"bin\",\n    \"template\",\n    \"package.json\"\n  ],\n  \"engines\": {\n    \"node\": \">=v18.3.0\"\n  },\n  \"scripts\": {\n    \"build\": \"tsup\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"nest\",\n    \"cli\"\n  ],\n  \"author\": \"zjjaxx\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@tsconfig/node22\": \"^22.0.2\",\n    \"@types/node\": \"^22.15.19\",\n    \"tsup\": \"^8.5.0\",\n    \"typescript\": \"^5.8.3\"\n  },\n  \"dependencies\": {\n    \"@clack/prompts\": \"^0.10.1\",\n    \"create-nest\": \"link:\",\n    \"gradient-string\": \"^3.0.0\",\n    \"handlebars\": \"^4.7.8\",\n    \"picocolors\": \"^1.1.1\"\n  }\n}\n","import gradient from \"gradient-string\";\nexport const gradientBanner = gradient([\n  { color: \"#42d392\", pos: 0 },\n  { color: \"#42d392\", pos: 0.1 },\n  { color: \"#647eff\", pos: 1 },\n])(\n  \"A universal nestjs template\"\n);\nexport const defaultBanner = \"A universal nestjs template\"","export const FEATURE_OPTIONS = [\n  {\n    value: \"auth\",\n    label: \"鉴权\",\n  },\n  {\n    value: \"cache\",\n    label: \"缓存\",\n  },\n  {\n    value: \"mail\",\n    label: \"邮件\",\n  },\n  {\n    value: \"swagger\",\n    label: \"接口文档\",\n  }\n] as const;\n","import {\n  intro,\n  outro,\n  text,\n  confirm,\n  multiselect,\n  select,\n  isCancel,\n  cancel,\n} from \"@clack/prompts\";\nimport picocolors from \"picocolors\";\nimport * as fs from \"node:fs\";\nimport path from \"node:path\";\nconst { red, green, cyan, yellow } = picocolors;\n\nexport async function unwrapPrompt<T>(\n  maybeCancelPromise: Promise<T | symbol>\n): Promise<T> {\n  const result = await maybeCancelPromise;\n  if (isCancel(result)) {\n    cancel(red(\"✖\") + ` 操作取消`);\n    process.exit(0);\n  }\n  return result;\n}\nexport function canSkipEmptying(dir: string) {\n  if (!fs.existsSync(dir)) {\n    return true;\n  }\n\n  const files = fs.readdirSync(dir);\n  if (files.length === 0) {\n    return true;\n  }\n  if (files.length === 1 && files[0] === \".git\") {\n    return true;\n  }\n\n  return false;\n}\nexport function isValidPackageName(projectName) {\n  return /^(?:@[a-z0-9-*~][a-z0-9-*._~]*\\/)?[a-z0-9-~][a-z0-9-._~]*$/.test(\n    projectName\n  );\n}\n\nexport function toValidPackageName(projectName) {\n  return projectName\n    .trim()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/^[._]/, \"\")\n    .replace(/[^a-z0-9-~]+/g, \"-\");\n}\nexport function postOrderDirectoryTraverse(dir, dirCallback, fileCallback) {\n  for (const filename of fs.readdirSync(dir)) {\n    if (filename === \".git\") {\n      continue;\n    }\n    const fullpath = path.resolve(dir, filename);\n    if (fs.lstatSync(fullpath).isDirectory()) {\n      postOrderDirectoryTraverse(fullpath, dirCallback, fileCallback);\n      dirCallback(fullpath);\n      continue;\n    }\n    fileCallback(fullpath);\n  }\n}\n\nexport function emptyDir(dir) {\n  if (!fs.existsSync(dir)) {\n    return;\n  }\n\n  postOrderDirectoryTraverse(\n    dir,\n    (dir) => fs.rmdirSync(dir),\n    (file) => fs.unlinkSync(file)\n  );\n}\n","import * as fs from \"node:fs\";\nimport * as path from \"node:path\";\nimport { pathToFileURL } from \"node:url\";\n\nimport deepMerge from \"./deepMerge\";\nimport sortDependencies from \"./sortDependencies\";\n\n/**\n * Renders a template folder/file to the file system,\n * by recursively copying all files under the `src` directory,\n * with the following exception:\n *   - `_filename` should be renamed to `.filename`\n *   - Fields in `package.json` should be recursively merged\n * @param {string} src source filename to copy\n * @param {string} dest destination filename of the copy operation\n */\nfunction renderTemplate(src, dest, callbacks) {\n  // 使用 fs.statSync 方法同步获取 src 路径对应的文件或目录的状态信息，\n  // 该信息会存储在 stats 变量中，后续可用于判断 src 是文件还是目录等操作。\n  const stats = fs.statSync(src);\n\n  if (stats.isDirectory()) {\n    // skip node_module\n    if (path.basename(src) === \"node_modules\") {\n      return;\n    }\n\n    // 创建目标目录，如果目录已存在则不报错，`recursive: true` 表示会递归创建所有不存在的父目录\n    fs.mkdirSync(dest, { recursive: true });\n    // 遍历源目录下的所有文件和子目录\n    // 使用 fs.readdirSync 同步读取源目录 src 下的所有文件和子目录的名称\n    // 然后通过 for...of 循环依次处理每个文件或子目录\n    for (const file of fs.readdirSync(src)) {\n      // 递归调用 renderTemplate 函数，处理当前文件或子目录\n      // path.resolve 用于将源目录和当前文件/子目录名称拼接成完整的源路径\n      // 同样，将目标目录和当前文件/子目录名称拼接成完整的目标路径\n      // 同时将 callbacks 数组传递给递归调用的函数\n      renderTemplate(\n        path.resolve(src, file),\n        path.resolve(dest, file),\n        callbacks\n      );\n    }\n    return;\n  }\n\n  const filename = path.basename(src);\n\n  if (filename === \"package.json\" && fs.existsSync(dest)) {\n    // merge instead of overwriting\n    const existing = JSON.parse(fs.readFileSync(dest, \"utf8\"));\n    const newPackage = JSON.parse(fs.readFileSync(src, \"utf8\"));\n    const pkg = sortDependencies(deepMerge(existing, newPackage));\n    fs.writeFileSync(dest, JSON.stringify(pkg, null, 2) + \"\\n\");\n    return;\n  }\n  // 检查文件名是否以 \"_\" 开头，如果是，则需要将文件名中的 \"_\" 替换为 \".\"\n  // 这是因为在模板渲染过程中，以 \"_\" 开头的文件需要重命名为以 \".\" 开头的文件\n  if (filename.startsWith(\"_\")) {\n    // 重命名逻辑：将 `_file` 重命名为 `.file`\n    // 先获取目标文件所在的目录路径，再将文件名中的 \"_\" 替换为 \".\"，最后组合成新的完整路径\n    dest = path.resolve(path.dirname(dest), filename.replace(/^_/, \".\"));\n  }\n\n  if (filename === \"_gitignore\" && fs.existsSync(dest)) {\n    // append to existing .gitignore\n    const existing = fs.readFileSync(dest, \"utf8\");\n    const newGitignore = fs.readFileSync(src, \"utf8\");\n    fs.writeFileSync(dest, existing + \"\\n\" + newGitignore);\n    return;\n  }\n\n  // data file for EJS templates\n  // 检查文件名是否以 .data.mjs 结尾，如果是，则进行特殊处理\n  if (filename.endsWith(\".data.mjs\")) {\n    // 将目标路径中的 .data.mjs 后缀移除，使用处理后的路径作为数据存储的键\n    dest = dest.replace(/\\.data\\.mjs$/, \"\");\n\n    // 向 callbacks 数组中添加一个异步回调函数，该函数会在处理模板文件时被调用\n    callbacks.push(async (dataStore) => {\n      // 动态导入 .data.mjs 文件，并获取其默认导出的函数\n      const getData = (await import(pathToFileURL(src).toString())).default;\n\n      // 调用 getData 函数，传入包含旧数据的对象，并将结果存储到 dataStore 中\n      // 尽管当前的 getData 函数都是同步的，但仍保留异步调用的可能性\n      dataStore[dest] = await getData({\n        oldData: dataStore[dest] || {},\n      });\n    });\n    // 跳过复制 .data.mjs 文件\n    return;\n  }\n  fs.copyFileSync(src, dest);\n}\n\nexport default renderTemplate;\n","const isObject = (val) => val && typeof val === 'object'\nconst mergeArrayWithDedupe = (a, b) => Array.from(new Set([...a, ...b]))\n\n/**\n * Recursively merge the content of the new object to the existing one\n * @param {Object} target the existing object\n * @param {Object} obj the new object\n */\nfunction deepMerge(target, obj) {\n  for (const key of Object.keys(obj)) {\n    const oldVal = target[key]\n    const newVal = obj[key]\n\n    if (Array.isArray(oldVal) && Array.isArray(newVal)) {\n      target[key] = mergeArrayWithDedupe(oldVal, newVal)\n    } else if (isObject(oldVal) && isObject(newVal)) {\n      target[key] = deepMerge(oldVal, newVal)\n    } else {\n      target[key] = newVal\n    }\n  }\n\n  return target\n}\n\nexport default deepMerge\n","// 此函数的作用是对 package.json 文件中的依赖项进行排序。\n// 输入参数为一个表示 package.json 内容的对象。\nexport default function sortDependencies(packageJson) {\n  // 用于存储排序后的依赖项的对象\n  const sorted = {}\n\n  // 定义需要排序的依赖项类型数组\n  const depTypes = ['dependencies', 'devDependencies', 'peerDependencies', 'optionalDependencies']\n\n  // 遍历每种依赖项类型\n  for (const depType of depTypes) {\n    // 检查 package.json 中是否存在该类型的依赖项\n    if (packageJson[depType]) {\n      // 初始化排序后的该类型依赖项对象\n      sorted[depType] = {}\n\n      // 获取该类型依赖项的所有键名，排序后遍历\n      Object.keys(packageJson[depType])\n        .sort()\n        .forEach((name) => {\n          // 将排序后的依赖项复制到 sorted 对象中\n          sorted[depType][name] = packageJson[depType][name]\n        })\n    }\n  }\n\n  // 返回原始的 package.json 对象，并覆盖排序后的依赖项\n  return {\n    ...packageJson,\n    ...sorted,\n  }\n}\n","import * as fs from 'node:fs'\nimport * as path from 'node:path'\n\nexport function preOrderDirectoryTraverse(dir, dirCallback, fileCallback) {\n  for (const filename of fs.readdirSync(dir)) {\n    if (filename === '.git') {\n      continue\n    }\n    const fullpath = path.resolve(dir, filename)\n    if (fs.lstatSync(fullpath).isDirectory()) {\n      dirCallback(fullpath)\n      // in case the dirCallback removes the directory entirely\n      if (fs.existsSync(fullpath)) {\n        preOrderDirectoryTraverse(fullpath, dirCallback, fileCallback)\n      }\n      continue\n    }\n    fileCallback(fullpath)\n  }\n}\n\nexport function postOrderDirectoryTraverse(dir, dirCallback, fileCallback) {\n  for (const filename of fs.readdirSync(dir)) {\n    if (filename === '.git') {\n      continue\n    }\n    const fullpath = path.resolve(dir, filename)\n    if (fs.lstatSync(fullpath).isDirectory()) {\n      postOrderDirectoryTraverse(fullpath, dirCallback, fileCallback)\n      dirCallback(fullpath)\n      continue\n    }\n    fileCallback(fullpath)\n  }\n}\n","export default function getCommand(packageManager: string, scriptName: string, args?: string) {\n  if (scriptName === 'install') {\n    return packageManager === 'yarn' ? 'yarn' : `${packageManager} install`\n  }\n  if (scriptName === 'build') {\n    return packageManager === 'npm' || packageManager === 'bun'\n      ? `${packageManager} run build`\n      : `${packageManager} build`\n  }\n\n  if (args) {\n    return packageManager === 'npm'\n      ? `npm run ${scriptName} -- ${args}`\n      : `${packageManager} ${scriptName} ${args}`\n  } else {\n    return packageManager === 'npm' ? `npm run ${scriptName}` : `${packageManager} ${scriptName}`\n  }\n}\n"],"mappings":"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","names":["parseArgs","package_default","intro","text","confirm","cancel","multiselect","outro","gradient","gradientBanner","defaultBanner","FEATURE_OPTIONS","isCancel","cancel","picocolors","fs","path","red","green","cyan","yellow","unwrapPrompt","maybeCancelPromise","result","canSkipEmptying","dir","files","isValidPackageName","projectName","toValidPackageName","postOrderDirectoryTraverse","dirCallback","fileCallback","filename","fullpath","emptyDir","file","fs","path","pathToFileURL","isObject","val","mergeArrayWithDedupe","a","b","deepMerge","target","obj","key","oldVal","newVal","deepMerge_default","sortDependencies","packageJson","sorted","depTypes","depType","name","renderTemplate","src","dest","callbacks","file","filename","existing","newPackage","pkg","sortDependencies","deepMerge_default","newGitignore","dataStore","getData","pathToFileURL","renderTemplate_default","picocolors","path","fs","fileURLToPath","Handlebars","fs","path","preOrderDirectoryTraverse","dir","dirCallback","fileCallback","filename","fullpath","getCommand","packageManager","scriptName","args","red","green","cyan","bold","dim","picocolors","init","argv","positionals","parseArgs","package_default","targetDir","defaultProjectName","forceOverwrite","result","intro","gradientBanner","defaultBanner","_result","unwrapPrompt","text","value","canSkipEmptying","confirm","cancel","isValidPackageName","toValidPackageName","multiselect","FEATURE_OPTIONS","root","path","fs","emptyDir","pkg","templateRoot","fileURLToPath","callbacks","render","templateName","templateDir","renderTemplate_default","dataStore","cb","preOrderDirectoryTraverse","filepath","template","dest","content","Handlebars","userAgent","packageManager","outroMessage","cdProjectName","getCommand","outro"]}